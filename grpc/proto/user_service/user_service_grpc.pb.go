// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: user_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hashing_CheckHash_FullMethodName  = "/user_service.Hashing/CheckHash"
	Hashing_GetHash_FullMethodName    = "/user_service.Hashing/GetHash"
	Hashing_CreateHash_FullMethodName = "/user_service.Hashing/CreateHash"
)

// HashingClient is the client API for Hashing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashingClient interface {
	CheckHash(ctx context.Context, in *CheckHashRequest, opts ...grpc.CallOption) (*CheckHashResponse, error)
	GetHash(ctx context.Context, in *GetHashRequest, opts ...grpc.CallOption) (*GetHashResponse, error)
	CreateHash(ctx context.Context, in *CreateHashRequest, opts ...grpc.CallOption) (*CreateHashResponse, error)
}

type hashingClient struct {
	cc grpc.ClientConnInterface
}

func NewHashingClient(cc grpc.ClientConnInterface) HashingClient {
	return &hashingClient{cc}
}

func (c *hashingClient) CheckHash(ctx context.Context, in *CheckHashRequest, opts ...grpc.CallOption) (*CheckHashResponse, error) {
	out := new(CheckHashResponse)
	err := c.cc.Invoke(ctx, Hashing_CheckHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashingClient) GetHash(ctx context.Context, in *GetHashRequest, opts ...grpc.CallOption) (*GetHashResponse, error) {
	out := new(GetHashResponse)
	err := c.cc.Invoke(ctx, Hashing_GetHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashingClient) CreateHash(ctx context.Context, in *CreateHashRequest, opts ...grpc.CallOption) (*CreateHashResponse, error) {
	out := new(CreateHashResponse)
	err := c.cc.Invoke(ctx, Hashing_CreateHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashingServer is the server API for Hashing service.
// All implementations must embed UnimplementedHashingServer
// for forward compatibility
type HashingServer interface {
	CheckHash(context.Context, *CheckHashRequest) (*CheckHashResponse, error)
	GetHash(context.Context, *GetHashRequest) (*GetHashResponse, error)
	CreateHash(context.Context, *CreateHashRequest) (*CreateHashResponse, error)
	mustEmbedUnimplementedHashingServer()
}

// UnimplementedHashingServer must be embedded to have forward compatible implementations.
type UnimplementedHashingServer struct {
}

func (UnimplementedHashingServer) CheckHash(context.Context, *CheckHashRequest) (*CheckHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHash not implemented")
}
func (UnimplementedHashingServer) GetHash(context.Context, *GetHashRequest) (*GetHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHash not implemented")
}
func (UnimplementedHashingServer) CreateHash(context.Context, *CreateHashRequest) (*CreateHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHash not implemented")
}
func (UnimplementedHashingServer) mustEmbedUnimplementedHashingServer() {}

// UnsafeHashingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashingServer will
// result in compilation errors.
type UnsafeHashingServer interface {
	mustEmbedUnimplementedHashingServer()
}

func RegisterHashingServer(s grpc.ServiceRegistrar, srv HashingServer) {
	s.RegisterService(&Hashing_ServiceDesc, srv)
}

func _Hashing_CheckHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashingServer).CheckHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hashing_CheckHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashingServer).CheckHash(ctx, req.(*CheckHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hashing_GetHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashingServer).GetHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hashing_GetHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashingServer).GetHash(ctx, req.(*GetHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hashing_CreateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashingServer).CreateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hashing_CreateHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashingServer).CreateHash(ctx, req.(*CreateHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hashing_ServiceDesc is the grpc.ServiceDesc for Hashing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hashing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.Hashing",
	HandlerType: (*HashingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHash",
			Handler:    _Hashing_CheckHash_Handler,
		},
		{
			MethodName: "GetHash",
			Handler:    _Hashing_GetHash_Handler,
		},
		{
			MethodName: "CreateHash",
			Handler:    _Hashing_CreateHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
